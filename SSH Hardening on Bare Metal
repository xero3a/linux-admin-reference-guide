1. SSH Hardening on Bare Metal
Overview
You‚Äôre working directly on the hardware and want to secure SSH access by moving from password to key-based authentication, minimizing lockout risks.

Pre-checks
You are logged into a local terminal on the RHEL machine.

Password-based SSH is currently enabled.

You are not using SSH keys yet.

Recommendations Before Disabling Password Authentication
Keep a local terminal session open to avoid being locked out.

Generate and install SSH keys before disabling password login.

# SSH Hardening on Bare Metal

Given you're on direct hardware, here's how to move forward safely:

## You‚Äôre Currently:

- Logged into a local terminal (TTY or graphical) on the RHEL machine  
- Preparing to configure key-based SSH for remote access  
- Not using `.ssh` keys yet  

---

## Recommendation Before Disabling PasswordAuthentication

- Keep a working terminal session open locally so if something goes wrong during SSH config, you‚Äôre not locked out.  
- Generate and install the SSH key on the RHEL machine before you disable password login.  

---

## Local Key Generation on the RHEL Host  
*(If you‚Äôll SSH from another box)*

- From your client system (the one you‚Äôll connect from remotely):

```
$ ssh-keygen -t ed25519 -C "sysadmin@rhel9"
$ ssh-copy-id -i ~/.ssh/id_ed25519.pub sysadmin@<RHEL_IP>
```
You should see output similar to:
```
/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/user/.ssh/id_ed25519.pub"
The authenticity of host 'localhost (::1)' can't be established.
ED25519 key fingerprint is {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
user@localhost's password: 

Number of key(s) added: 1
```
- Now try logging into the machine with:
```
$ ssh user@localhost
```
Check that only the keys you intended were added.

- Test remote login with:

$ssh -i ~/.ssh/id_ed25519 user@<RHEL_ip-or-hostname>
> If it works, you‚Äôre good to disable password login in sshd_config.

- SSH to Yourself (Test Local SSH Access)
You can even test locally:
```
$ ssh user@localhost
```
Expected prompts:
```
The authenticity of host 'localhost (::1)' can't be established.
ED25519 key fingerprint is {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'localhost' (ED25519) to the list of known hosts.
Note: If you type only single letters instead of "yes" or "no", the prompt will repeat with:
Please type 'yes', 'no' or the fingerprint:
```
> This ensures OpenSSH is working before you disable password authentication.

- Finalize Hardened SSHD Config

Edit the SSH daemon configuration:
```
$ sudo vi /etc/ssh/sshd_config
```
- Recommended safe config for direct installs:
```
Port 22
PermitRootLogin no
PasswordAuthentication no
PermitEmptyPasswords no
PubkeyAuthentication yes
PermitUserEnvironment no
UsePAM yes
X11Forwarding no
ClientAliveInterval 300
ClientAliveCountMax 2
```
- Save and exit, then restart sshd:
```
$ sudo systemctl restart sshd
```



# 2. Enable Secure Nested Virtualization

- Verify nested support in CPU/Kernel  
- Install KVM / libvirt stack  
- Secure libvirt, bridge interfaces, permissions  
- Set up VM disk protections and separation  

---

## Step-by-Step: Hardened Nested Virtualization Host on RHEL 9.4

### 2.1 Verify Nested Virtualization Support

For AMD CPUs:

```
$ cat /sys/module/kvm_amd/parameters/nested
```
Expected output:

For Intel CPUs:
```
$ cat /sys/module/kvm_intel/parameters/nested
```
If the output is N or nothing is returned, nested virtualization is not enabled and needs to be enabled.

2.2 Enable Nested Virtualization Permanently
For AMD:
```
$ echo "options kvm_amd nested=1" | sudo tee /etc/modprobe.d/kvm-amd.conf
```
For Intel:
```
$ echo "options kvm_intel nested=1" | sudo tee /etc/modprobe.d/kvm-intel.conf
```
Then reload the kernel modules:
```
$ sudo modprobe -r kvm_amd kvm_intel
$ sudo modprobe kvm_amd    # or sudo modprobe kvm_intel
```




# ‚úÖ 3. Install Virtualization Tools (KVM, Libvirt)

Register your system with `subscription-manager`  
> You'll need to register your system before you can install corresponding packages and tools.

---

### Register the System

- You‚Äôll need your Red Hat Customer Portal credentials:

```
$ sudo subscription-manager register
```
- It will prompt for:

Username: <Your_RH_Username>
Password: <Your_RH_Password>

- You should see a confirmation like:

The system has been registered with ID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
The registered system name is: localhost.localdomain
**Note:** If your subscription-manager status shows:

Overall Status: Disabled

- it means the host isn‚Äôt activated yet, even if your Red Hat account has Simple Content Access enabled.

- Re-register the System (if needed)
```
$ sudo subscription-manager register
```
Enter your Red Hat Customer Portal username & password.

If you get an ‚ÄúAccount has SCA enabled‚Äù message, that‚Äôs good ‚Äî it means you won‚Äôt have to pick a pool.

- Refresh the Subscription
```
$ sudo subscription-manager refresh
```

Verify Status
```
$ sudo subscription-manager status
```

Expected:

Overall Status: Current
Potential output if disabled:

+-------------------------------------------+
   System Status Details
+-------------------------------------------+
Overall Status: Disabled
Content Access Mode is set to Simple Content Access. This host has access to content, regardless of subscription status.

System Purpose Status: Disabled
Attempt to Refresh Again (if needed)
```
$ sudo subscription-manager refresh
$ sudo subscription-manager status
```

**Note:** If the same error occurs, you can still proceed by enabling your repos.

- Enable Required Repositories
```
$ sudo subscription-manager repos \
   --enable rhel-9-for-x86_64-baseos-rpms \
   --enable rhel-9-for-x86_64-appstream-rpms \
   --enable rhel-9-for-x86_64-supplementary-rpms
```

- Update System and Reboot
```
$ sudo dnf clean all
$ sudo dnf update -y
$ sudo reboot
```




# ‚úÖ 4. Install Virtualization Packages and Configure Networking

---

### Install Virtualization Packages

```
$ sudo dnf install -y \
  qemu-kvm \
  libvirt \
  virt-install \
  virt-manager \
  bridge-utils \
  libvirt-daemon-config-network \
  libvirt-daemon-kvm
```
**Note:** Packages can be installed individually if preferred.

- Enable and Start libvirtd
```
$ sudo systemctl enable --now libvirtd
```

- Verify libvirt is running:
```
$ sudo virsh list --all
```

- Check status:
```
$ sudo systemctl status libvirtd
```

- Add User to libvirt & kvm Groups
```
$ sudo usermod -aG libvirt $(whoami)
$ sudo usermod -aG kvm $(whoami)
$ newgrp libvirt
$ newgrp kvm
$ groups
```
**Note:** You‚Äôll need to log out and back in for group changes to take effect.

> If bridge-utils Is Deprecated on Your Distro
> brctl (from bridge-utils) was the old tool for managing bridges.

> Modern RHEL uses NetworkManager with nmcli and nmtui commands for bridge creation.

> Kernel bridging functionality remains; only the legacy CLI is deprecated.

- Creating a Bridge for KVM Nested Virtualization Using nmcli

a. Check if bridge kernel module is loaded:
```
$ lsmod | grep bridge
```
If no output:
```
$ sudo modprobe bridge
```

b. Install virtualization packages (alternative group install):
```
$ sudo dnf install @virtualization
$ sudo systemctl enable --now libvirtd
```

c. Create a bridge via nmcli
> (Replace enp3s0 with your actual network interface name)
```
$ sudo nmcli connection add type bridge ifname br0 con-name br0
$ sudo nmcli connection add type bridge-slave ifname enp3s0 master br0
$ sudo nmcli connection modify br0 ipv4.method auto ipv6.method ignore
$ sudo nmcli connection up br0
```

d. Verify bridge interface:
```
$ ip addr show br0
```
You should see the bridge interface with an assigned IP address.

> If you want the legacy brctl commands for testing, you can install bridge-utils from EPEL 9, but for hardened, future-proof RHEL 9 setups, use `nmcli` and `ip` commands instead.

e. Verify KVM is Active
```
$ sudo virsh list --all
```
> Even if no domains are listed, KVM is active.

You now have a fully registered and patched RHEL 9.x host ready for virtualization.






# üî• 5. Secure libvirt UNIX Socket Access (Optional)

To restrict access to `libvirt` control sockets and harden the virtualization host:

---

### Lock Down UNIX Socket Permissions

Edit the libvirt daemon config file:

```
$ sudo vi /etc/libvirt/libvirtd.conf
```
- Ensure the following lines are present (or uncommented and set accordingly):
```
unix_sock_group = "libvirt"
unix_sock_ro_perms = "0775"
unix_sock_rw_perms = "0770"
auth_unix_ro = "none"
auth_unix_rw = "none"
```

Restart libvirtd to Apply Changes
```
$ sudo systemctl restart libvirtd
```
> This configuration ensures that only users in the libvirt group can access and control the libvirt UNIX socket, enhancing access control.







# üõ°Ô∏è 6. Enable IOMMU for PCI Passthrough (Optional)

Enabling IOMMU allows direct device passthrough to virtual machines ‚Äî useful for scenarios like GPU passthrough.

---

### Edit GRUB Configuration

- Open the GRUB config:

```
$ sudo vi /etc/default/grub
```

- Append the following to the GRUB_CMDLINE_LINUX line:

For Intel CPUs:

intel_iommu=on

For AMD CPUs:

amd_iommu=on

- Regenerate GRUB and Reboot

- Apply the changes:
```
$ sudo grub2-mkconfig -o /boot/grub2/grub.cfg
$ sudo reboot
```
Once rebooted, IOMMU will be active and ready for passthrough configurations.







# üîê 7. Sysctl Tuning for Host and VMs

Tune kernel parameters to improve security and ensure safe networking behavior for host and virtual machines.

---

### Create a Custom Sysctl Configuration File

```
$ sudo vi /etc/sysctl.d/99-kvm-host.conf

- Add the Following Settings
```
# Security: prevent SYN flood DoS from VMs
net.ipv4.tcp_syncookies = 1

# IPv4 forwarding for bridge networks
net.ipv4.ip_forward = 1

# Disable source routing
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0

# Protect against spoofed packets
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# Martian packets logging
net.ipv4.conf.all.log_martians = 1
```

- Apply the Settings
```
$ sudo sysctl --system
```
> This command reloads all sysctl configuration files and applies the changes immediately.







# üîê 8. Disk Image Hardening for VMs

Harden your virtual machine disk storage to improve isolation and security.

---

### Recommended Practices

- Use a **dedicated partition** or **LVM volume** for storing VM disk images, e.g.:

$ /var/lib/libvirt/images/


- Set **strict permissions** on the directory:

```
$ sudo chown root:kvm /var/lib/libvirt/images
$ sudo chmod 770 /var/lib/libvirt/images
```
**Note:** You can optionally mount VM storage from encrypted volumes or ZFS datasets if higher security is required.







# üîê 9. Firewall Considerations for libvirt

Libvirt manages its own firewall rules through `nwfilter`. By default, NATed virtual networks are isolated from the host network.

---

### When Using Bridged Networking

If you're using **bridged mode** (instead of NAT), you'll need to manually configure your host firewall to forward traffic to your VMs.

#### Example: Forward SSH Traffic (Port 22) to a VM

```
$ sudo firewall-cmd --permanent --add-forward-port=port=22:proto=tcp:toaddr=<vm_ip>:toport=22
$ sudo firewall-cmd --reload
```
> Replace <vm_ip> with the actual IP address of your virtual machine.
> We‚Äôll expand this further when configuring bridged interfaces.







# üìú 10. Enable Logging & Monitoring

Enable host-based intrusion detection and basic monitoring tools to strengthen security visibility on your RHEL virtualization host.

---

### Step 1: Install the EPEL Repository

```
$ sudo dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
```

Step 2: Refresh Metadata & Install Security Tools
```
$ sudo dnf clean all
$ sudo dnf makecache

$ sudo dnf install aide 
$ sudo dnf install fail2ban 
$ sudo dnf install lynis
```

Step 3: Initialize & Configure AIDE (File Integrity Monitoring)
```
$ sudo aide --init
$ sudo mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
```

Step 4: Enable & Start Fail2Ban
```
$ sudo systemctl enable --now fail2ban
```

Step 5: Run Lynis Audit
```
$ sudo lynis audit system
> This provides a security baseline report of your system with recommendations for hardening.
```







# üßØ 11. Snapshot or Document the System

Now that your system is fully hardened and configured, it‚Äôs a good time to back it up or document its current state.

---

### Recommended Actions

- ‚úÖ **Take a Full Disk Image**  
  Use tools like **Clonezilla**, or create a VM snapshot (if applicable) to preserve the current state.

- ‚úÖ **Export Installed Package List**  
  This allows you to recreate or audit your setup later:

```
$ rpm -qa > ~/installed-packages.txt
```
- Store the manifest in a secure location (e.g. backup server, encrypted drive, or Git with sensitive data excluded).








## ‚úÖ Summary: Your RHEL Host Is Now Hardened for Secure Virtualization

You now have:

- üîê SSH hardened with key-based authentication only
- üì¶ System registered with Red Hat and required repos enabled
- üß∞ KVM, libvirt, and virtualization tools fully installed
- üõ°Ô∏è SELinux, firewalld, and auditing enforced
- üß¨ Nested virtualization and IOMMU enabled for passthrough
- üåâ Bridged networking configured using `nmcli`
- üîß Sysctl tuned for network and kernel security
- üóÇÔ∏è VM disk storage isolated with strict permissions
- üîå libvirt UNIX socket permissions locked down
- üî• Logging and monitoring tools (AIDE, Fail2Ban, Lynis) configured
- üì∏ Snapshot or system manifest created for rollback or auditing
